name: gcmake-basic-tests
include_prefix: CGEN_TEST
description: "GCMake rust test project"
vendor: "scupit"
version: "0.0.1"
default_build_type: Debug

installer_config:
  title: "GCMake Basic Tests"
  description: "Programs and libraries build while testing the GCMake tool"
  name_prefix: basic-gcmake-tests
  shortcuts:
    test-sfml:
      name: The Test Program

languages:
  C:
    standard: 11
  Cpp:
    standard: 17

supported_compilers:
  - GCC
  - MSVC
  - Clang

test_framework:
  Catch2:
    git_tag: v3.0.1

output:
  test-json:
    output_type: Executable
    entry_file: test-json-main.cpp
    link:
      - nlohmann_json::nlohmann_json
  test-sfml:
    output_type: Executable
    entry_file: test-sfml-main.cpp
    windows_icon: icons/Smiley.ico
    link:
      # - SFML::{ window, ((windows)) main }
      # This is equivalent to the above. Note that above, SFML::system is transitively included
      - SFML::{ system, window }
      - ((windows)) SFML::main
  Main:
    output_type: Executable 
    entry_file: ./main.cpp
    link:
      - build-info-lib::build-info
      - dll-lib::dll-lib
      - toggle-lib::toggle-lib

global_defines:
  - GLOBAL_DEF="Is globally defined"
  - ((windows)) TARGETING_WINDOWS="Oh yeah"
  - ((not windows)) TARGETING_WINDOWS="NOPE"

global_properties:
  # Example of setting the default compiled lib type to static. 'Shared' is the fallback default
  # when this property is not specified.
  default_compiled_lib_type: Static
  ipo_enabled_by_default: true

prebuild_config:
  link:
    - nlohmann_json::nlohmann_json

# gcmake_dependencies:

predefined_dependencies:
  imgui:
    git_tag: v1.88
  argparse:
    git_tag: v2.9
  pugixml:
    git_tag: v1.12.1
  cxxopts:
    git_tag: v3.0.0
  FTXUI:
    git_tag: v3.0.0
  CLI11:
    git_tag: v2.2.0
  SFML:
    git_tag: "2.5.1"
    # commit_hash: "2f11710abc5aa478503a7ff3f9e654bd2078ebab"
  SDL2: { }
  glm:
    git_tag: master
  nlohmann_json:
    git_tag: v3.10.4
  stb:
    git_tag: master
  GLFW:
    git_tag: "3.3.7"
  GLEW: { }
  OpenGL: { }
  fmt:
    git_tag: "8.1.1"
  Threads: { }
  wxWidgets: { }
  # Use master branch of yaml-cpp instead of the latest 'yaml-cpp-0.7.0'.
  # cmake_dependent_option currently force overrides YAML_CPP_INSTALL by hiding the option
  # completely (see the issue at https://gitlab.kitware.com/cmake/cmake/-/issues/22909)
  # on the yaml-cpp-0.7.0 branch. This issue is not present on the master branch.
  yaml-cpp:
    git_tag: master
  magic_enum:
    git_tag: v0.8.1

build_configs:
  Debug:
    AllCompilers:
      defines:
        - DEBUG_MODE=1
        # Testing quoted strings in defines
        - BUILD_MODE="Debug aw yeah"
        # TODO: Implement platform and compiler specifiec defines and flags
        # - ((windows or linux)) ON_WINDOWS_OR_LINUX=1
    GCC:
      # Optional compiler flags: -fanalyzer, -static-libgcc, -static-libstdc++, -static
      compiler_flags: [ -Og, -g, -Wall, -Wextra, -Wconversion, -Wuninitialized, -pedantic, -pedantic-errors]
      defines:
        - GCC_DEBUG=1
    Clang:
      # Optional compiler flags: -mwindows, -static-libgcc, -static-libstdc++, -static
      compiler_flags: [ -Og, -g, -Wall, -Wextra, -Wconversion, -Wuninitialized, -pedantic, -pedantic-errors]
      defines:
        - CLANG_DEBUG=1
    MSVC:
      compiler_flags: [ /Od, /W4, /DEBUG ]
      defines:
        - MSVC_DEBUG=1

  Release:
    AllCompilers:
      defines:
        - RELEASE_MODE=1
        - NDEBUG
        - BUILD_MODE="Release"
    GCC:
      # Optional compiler flags: -mwindows, -static-libgcc, -static-libstdc++, -static
      compiler_flags: [ -O3 ]
      linker_flags: [ -s ]
      defines:
        - GCC_RELEASE=1
    Clang:
      # Optional compiler flags: -mwindows, -static-libgcc, -static-libstdc++, -static
      compiler_flags: [ -O3 ]
      linker_flags: [ -s ]
      defines:
        - CLANG_RELEASE=1
    MSVC:
      compiler_flags: [ /O2, /GL ]
      defines:
        - MSVC_RELEASE=1

  MinSizeRel:
    AllCompilers:
      defines:
        - SMALL_RELEASE_MODE=1
        - NDEBUG
        - BUILD_MODE="MinSizeRel"
    GCC:
      compiler_flags: [ -Os ]
      linker_flags: [ -s ]
      defines:
        - GCC_SMALL_RELEASE=1
    Clang:
      compiler_flags: [ -Os ]
      linker_flags: [ -s ]
      defines:
        - CLANG_SMALL_RELEASE=1
    MSVC:
      compiler_flags: [ /O1, /GL ]
      defines:
        - MSVC_SMALL_RELEASE=1
      
  RelWithDebInfo:
    AllCompilers:
      defines:
        - DEBUGGABLE_RELEASE_MODE=1
        - BUILD_MODE="RelWithDebInfo"
    GCC:
      compiler_flags: [ -O2, -g ]
      defines:
        - GCC_DEBUGGABLE_RELEASE=1
    Clang:
      compiler_flags: [ -O2, -g ]
      defines:
        - CLANG_DEBUGGABLE_RELEASE=1
    MSVC:
      compiler_flags: [ /O2, /DEBUG ]
      defines:
        - MSVC_DEBUGGABLE_RELEASE=1
      